'use strict';

var        _fs = require( 'fs' )
  ,       path = require( 'path' )
  ,         fs = {}

  ,         co = require( 'co' )
  ,   thunkify = require( 'thunkify' )
  , onFinished = require( 'finished' )

  ,        dev = true
  ,   frontend = path.join( __dirname, '..', '..', 'frontend' )
  ,    tplExts = [ 'jade', 'styl', 'md' ]
                   .concat( dev ? 'css' : '' ) // block direct access to .css files in dev mode
  ,      tplRx = new RegExp( '\\.(?:' + tplExts.join( '|' ) + ')$' )
  ;

[ 'readFile', 'stat' ].forEach( function( nm ){
	fs[ nm ] = thunkify( _fs[ nm ] );
} );

function exists( path ){
	return function( cb ){
		_fs.exists( path, function( val ){ cb( null, val ); } );
	}
}

module.exports = function( app ){
	app.use( function *( next ){
		var filePath = path.normalize( path.join( frontend, this.path ) )
		  , stats
		  ;

  		// don't allow serving files outside of the frontend folder
		if( ( filePath.indexOf( frontend ) !== 0 ) ){ return; }

		if(
		       ( tplRx.test( filePath ) )                      // block template files
			|| !( yield exists( filePath ) )                   // file doesn't exist
			|| !( stats = yield fs.stat( filePath ) ).isFile() // not a file (probably a directory)
		){
			return yield next;
		}

		this.set( 'Last-Modified' , stats.mtime.toUTCString() );
		this.set( 'Content-Length', stats.size );
		this.type = path.extname( filePath );

	    var stream = this.body = _fs.createReadStream( filePath );
	    onFinished( this, stream.destroy.bind( stream ) );
	} );
};