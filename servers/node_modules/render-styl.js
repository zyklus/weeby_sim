'use strict';

var      _fs = require( 'fs' )
  ,     path = require( 'path' )
  ,       fs = {}

  ,   stylus = require( 'stylus' )
  ,      nib = require( 'nib' )
  , thunkify = require( 'thunkify' )

  , frontend = path.join( __dirname, '..', '..', 'frontend' )

  ,      dev = true

  ,    cssRx = /\/css\/([^\/]+)\.css$/
  ;


[ 'readFile', 'writeFile', 'stat' ].forEach( function( nm ){
	fs[ nm ] = thunkify( _fs[ nm ] );
} );

function exists( path ){
	return function( cb ){
		_fs.exists( path, function( val ){ cb( null, val ); } );
	}
}

module.exports = function( app ){
	app.use( function *( next ){
		var filePath = path.normalize( path.join( frontend, this.path ) )
		  , stylPath = filePath.replace( cssRx, function( res, file ){
				return '/styl/' + file + '.styl';
			} )
		  , stats
		  ;

  		// don't allow serving files outside of the frontend folder
		if( ( filePath.indexOf( frontend ) !== 0 ) ){ return; }

		if(
			   !cssRx.test( filePath )                         // not a .css file
		    || !( yield exists( stylPath ) )                   // file doesn't exist
			|| !( stats = yield fs.stat( stylPath ) ).isFile() // not a file (probably a directory)
		){
			return yield next;
		}

		var styl = stylus( yield fs.readFile( stylPath, { encoding : 'utf8' } ) )
			.set   ( 'filename', stylPath )
			.set   ( 'compress', true     )
			.use   ( nib()                )
			.import( 'nib'                )

		  ,  css = yield styl.render.bind( styl )
		  ;

		// don't write out generated css in dev mode -- keep git clean!
		if( !dev ){
			fs.writeFile( filePath, css, function(){} );
		}

		this.body = css;
		this.type = 'css';
	} );
};